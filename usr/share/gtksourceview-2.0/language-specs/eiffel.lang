<?xml version="1.0" encoding="UTF-8"?>
<!--

 Author: Hasan Karahan <hasan.karahan81@gmail.com>
 Copyright (C) 2008 Hasan Karahan <hasan.karahan81@gmail.com>

 This library is free software; you can redistribute it and/or
 modify it under the terms of the GNU Library General Public
 License as published by the Free Software Foundation; either
 version 2 of the License, or (at your option) any later version.

 This library is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Library General Public License for more details.

 You should have received a copy of the GNU Library General Public
 License along with this library; if not, write to the
 Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 Boston, MA 02111-1307, USA.

-->

<language id="eiffel" _name="Eiffel" version="2.0" _section="Sources">

  <metadata>
    <property name="mimetypes">text/x-eiffel</property>
    <property name="globs">*.e;*.eif</property>
    <property name="line-comment-start">--</property>
  </metadata>

  <styles>
    <style id="comment" _name="Comment" map-to="def:comment"/>
    <style id="string" _name="String" map-to="def:string"/>
    <style id="debug" _name="Debug" map-to="def:preprocessor"/>
    <style id="assertion" _name="Assertion" map-to="def:preprocessor"/>
    <style id="keyword" _name="Keyword" map-to="def:keyword"/>
    <style id="type" _name="Data Type" map-to="def:type"/>
    <style id="design-by-contract" _name="Design by Contract" map-to="def:keyword"/>
    <style id="exception-handling" _name="Exception Handling" map-to="def:keyword"/>
    <style id="predefined-variable" _name="Predefined Variable" map-to="def:builtin"/>
    <style id="void" _name="Void Value" map-to="def:special-constant"/>
    <style id="boolean" _name="Boolean Value" map-to="def:boolean"/>
    <style id="decimal" _name="Decimal number" map-to="def:decimal"/>
    <style id="hexadecimal" _name="Hexadecimal number" map-to="def:base-n-integer"/>
  </styles>

  <default-regex-options case-sensitive="false"/>

  <definitions>

    <context id="single-quoted-string" style-ref="string">
      <start>'</start>
      <end>'</end>
    </context>

    <context id="double-quoted-string" style-ref="string">
      <start>"</start>
      <end>"</end>
    </context>

    <context id="line-comment" style-ref="comment" end-at-line-end="true">
      <start>--</start>
      <include>
        <context ref="def:in-comment"/>
      </include>
    </context>

    <context id="debug" style-ref="debug">
      <start>debug</start>
      <end>end</end>
    </context>

    <context id="assertion" style-ref="assertion">
      <start>check</start>
      <end>end</end>
    </context>

    <context id="keywords" style-ref="keyword">

      <!-- class declaration -->
      <keyword>indexing</keyword>
      <keyword>deferred</keyword>
      <keyword>expanded</keyword>
      <keyword>class</keyword>
      <keyword>obsolete</keyword>
      <keyword>inherit</keyword>

      <!-- parent list -->
      <keyword>rename</keyword>
      <keyword>as</keyword>
      <keyword>export</keyword>
      <keyword>all</keyword>
      <keyword>undefine</keyword>
      <keyword>redefine</keyword>
      <keyword>select</keyword>
      <keyword>end</keyword>
      <keyword>(create|creation)</keyword>
      <keyword>feature</keyword>

      <!-- feature declaration -->
      <keyword>frozen</keyword>
      <keyword>prefix</keyword>
      <keyword>infix</keyword>
      <keyword>is</keyword>

      <!-- routine -->
      <keyword>obsolete</keyword>
      <keyword>require+(\s+else)</keyword>
      <keyword>local</keyword>

      <!-- routine body -->
      <keyword>deferred</keyword>
      <keyword>do</keyword>
      <keyword>once</keyword>
      <keyword>external</keyword>
      <keyword>alias</keyword>
      <keyword>ensure+(\s+then)</keyword>
      <keyword>rescue</keyword>
      <keyword>end</keyword>
      <keyword>unique</keyword>
      <keyword>invariant</keyword>
      <keyword>end</keyword>

      <!-- binary -->
      <keyword>and+(\s+then)</keyword>
      <keyword>or+(\s+else)</keyword>
      <keyword>xor</keyword>
      <keyword>implies</keyword>

      <!-- unary -->
      <keyword>not</keyword>

      <!-- instruction -->
      <keyword>retry</keyword>
      <keyword>if</keyword>
      <keyword>then</keyword>
      <keyword>elseif</keyword>
      <keyword>else</keyword>
      <keyword>end</keyword>
      <keyword>inspect</keyword>
      <keyword>when</keyword>
      <keyword>then</keyword>
      <keyword>end</keyword>

      <!-- loop -->
      <keyword>from</keyword>
      <keyword>invariant</keyword>
      <keyword>variant</keyword>
      <keyword>until</keyword>
      <keyword>loop</keyword>
      <keyword>do</keyword>
      <keyword>end</keyword>

      <!-- expression -->
      <keyword>strip</keyword>
      <keyword>old</keyword>

      <!-- type -->
      <keyword>separate</keyword>
      <keyword>expanded</keyword>
      <keyword>like</keyword>
    </context>

    <context id="predefined-variables" style-ref="predefined-variable">
      <keyword>Current</keyword>
      <keyword>Precursor</keyword>
      <keyword>Result</keyword>
    </context>

    <context id="builtin-types" style-ref="type">
      <keyword>CHARACTER</keyword>
      <keyword>STRING</keyword>
      <keyword>BIT</keyword>
      <keyword>BOOLEAN</keyword>
      <keyword>INTEGER</keyword>
      <keyword>REAL</keyword>
      <keyword>NONE</keyword>
      <keyword>ANY</keyword>
    </context>

    <context id="lib-eiffel-base" style-ref="type">
      <keyword>ACTIVE</keyword>
      <keyword>ARRAYED_LIST_CURSOR</keyword>
      <keyword>ARRAYED_LIST</keyword>
      <keyword>ARRAYED_STACK</keyword>
      <keyword>BILINEAR</keyword>
      <keyword>BI_LINKABLE</keyword>
      <keyword>CELL</keyword>
      <keyword>CONTAINER</keyword>
      <keyword>COUNTABLE</keyword>
      <keyword>CURSOR</keyword>
      <keyword>DYNAMIC_LIST</keyword>
      <keyword>HASH_TABLE_CURSOR</keyword>
      <keyword>HASH_TABLE</keyword>
      <keyword>INDEXABLE</keyword>
      <keyword>LINEAR</keyword>
      <keyword>LINKABLE</keyword>
      <keyword>LINKED_LIST_CURSOR</keyword>
      <keyword>LINKED_LIST</keyword>
      <keyword>LINKED_QUEUE</keyword>
      <keyword>LINKED_STACK</keyword>
      <keyword>LIST</keyword>
      <keyword>QUEUE</keyword>
      <keyword>RESIZABLE</keyword>
      <keyword>SEQUENCE</keyword>
      <keyword>SET</keyword>
      <keyword>STACK</keyword>
      <keyword>TWO_WAY_LIST_CURSOR</keyword>
      <keyword>TWO_WAY_LIST</keyword>
      <keyword>UNBOUNDED</keyword>
    </context>

    <context id="lib-eiffel-time" style-ref="type">
      <keyword>ABSOLUTE</keyword>
      <keyword>DATE_CONSTANTS</keyword>
      <keyword>DATE_DURATION</keyword>
      <keyword>DATE</keyword>
      <keyword>DATE_TIME_CONSTANTS</keyword>
      <keyword>DATE_TIME_DURATION</keyword>
      <keyword>DATE_TIME</keyword>
      <keyword>DATE_TIME_VALUE</keyword>
      <keyword>DATE_VALUE</keyword>
      <keyword>DURATION</keyword>
      <keyword>TIME_CONSTANTS</keyword>
      <keyword>TIME_DURATION</keyword>
      <keyword>TIME</keyword>
      <keyword>TIME_VALUE</keyword>
    </context>

    <context id="void-value" style-ref="void-value">
      <keyword>Void</keyword>
    </context>

    <context id="boolean" style-ref="boolean">
      <keyword>False</keyword>
      <keyword>True</keyword>
    </context>

    <context id="number" style-ref="decimal">
      <match extended="true">
      (?&lt;![\w\.])
      (([0-9]+)|([0-9]+\.[0-9]+([Ee][-]?[0-9]+)?))
      (?![\w\.])
      </match>
    </context>

    <context id="hexadecimal" style-ref="hexadecimal">
      <match extended="true">
      (?&lt;![\w\.])
      \$[0-9a-fA-F]*
      (?![\w\.])
      </match>
    </context>

    <context id="eiffel">
      <include>
        <context ref="single-quoted-string"/>
        <context ref="double-quoted-string"/>
        <context ref="line-comment"/>
        <context ref="debug"/>
        <context ref="assertion"/>
        <context ref="keywords"/>
        <context ref="predefined-variables"/>
        <context ref="builtin-types"/>
        <context ref="lib-eiffel-base"/>
        <context ref="lib-eiffel-time"/>
        <context ref="void-value"/>
        <context ref="boolean"/>
        <context ref="number"/>
        <context ref="hexadecimal"/>
      </include>
    </context>

  </definitions>
</language>
