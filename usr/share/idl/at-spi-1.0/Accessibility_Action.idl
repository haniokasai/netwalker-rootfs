/* 
 * AT-SPI - Assistive Technology Service Provider Interface 
 * (Gnome Accessibility Project; http://developer.gnome.org/projects/gap)
 *
 * Copyright 2001 Sun Microsystems, Inc.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

module Accessibility {
    /**
     * An interface through which a user-actionable user interface
     * component can be manipulated.  Components which react to mouse or
     * keyboard input from the user, (with the exception of pure text entry
     * fields with no other function), should implement this interface.
     * Typical actions include "click", "press", "release" (for instance for
     * buttons), "menu" (for objects which have context menus invokable from 
     * mouse or keyboard), "open" for icons representing files folders, and others.
     */
  interface Action : Bonobo::Unknown {

    /**
     * nActions: a \c long containing the number of actions this object supports.
     * 
     **/
    readonly attribute long nActions;

    /**
     * getDescription:
     * @param index: the index of the action 
     *   for which a description is desired.
     *
     * Get the description of the specified action.  The description of an action
     * may provide information about the result of action invocation, unlike the
     * action name.
     * @see getName.
     *
     * @returns: a \c string containing the description of the specified action.
     *
     **/
    string getDescription (in long index);

    /**
     * getName:
     * @param index: the index of the action 
     *   whose name is requested.
     *
     * Get the name of the specified action.  Action names generally describe
     * the user action, i.e. "click" or "press", rather then the result of 
     * invoking the action.
     *
     * @returns: a \c string containing the name of the specified action.
     *
     **/
    string getName (in long index);

    /**
     * doAction:
     * @param index: the 0-based index of the action to perform.
     *
     * Causes the object to perform the specified action.
     *
     * @returns: a \c boolean indicating success or failure.
     *
     **/
    boolean doAction (in long index);

    /**
     * getKeyBinding:
     * @param index: the 0-based index of the action 
     *   for which a key binding is requested.
     *
     * Get the key binding associated with a specific action.
     *
     * @returns: a \c string containing the key binding for the specified action,
     *   or an empty string ("") if none exists.
     **/
    string getKeyBinding (in long index);

      
    /**
     * \cond
     * unImplemented:
     *
     * placeholders for future expansion.
     */
    void unImplemented ();
    void unImplemented2 ();
    void unImplemented3 ();
    void unImplemented4 ();
      /** \endcond */
  };
};

