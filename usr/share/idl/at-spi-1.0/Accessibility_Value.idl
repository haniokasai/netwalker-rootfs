/* 
 * AT-SPI - Assistive Technology Service Provider Interface 
 * (Gnome Accessibility Project; http://developer.gnome.org/projects/gap)
 *
 * Copyright 2001 Sun Microsystems, Inc.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

module Accessibility {

   /**
    * An interface supporting controls which allow a
    * one-dimensional, scalar quantity to be modified or which
    * reflect a scalar quantity. (If STATE_EDITABLE is not present, 
    * the valuator is treated as "read only".
    *
    * @note Events generated by Image instances include:
    * \li \c "object:value-changed"
    */
  interface Value : Bonobo::Unknown {
    /**
     * The minimum value allowed by this valuator.
     */
    readonly attribute double minimumValue;
    /**
     * The maximum value allowed by this valuator.
     */
    readonly attribute double maximumValue;
    /**
     * The smallest incremental change which this valuator allows.
     * If 0, the incremental changes to the valuator are 
     * limited only by the precision of a double precision value
     * on the platform.
     */
    readonly attribute double minimumIncrement;
    /**
     * The current value of the valuator.
     */
    attribute double currentValue;

    /** \cond
     * unImplemented:
     *
     * placeholders for future expansion.
     */
    void unImplemented ();
    void unImplemented2 ();
    void unImplemented3 ();
    void unImplemented4 ();
    /** \endcond */
  };
};
