/* This file is automatically generated. Any changes made here will be lost. */

/* This header defines simple perlapi-ish macros for creating SV wrappers
 * and extracting the GPerl value from SV wrappers.  These macros are used
 * by the autogenerated typemaps, and are defined here so that you can use
 * the same logic anywhere in your code (e.g., if you handle the argument
 * stack by hand instead of using the typemap). */

#ifdef BONOBO_TYPE_DOCK
  /* GtkObject derivative BonoboDock */
# define SvBonoboDock(sv)	((BonoboDock*)gperl_get_object_check (sv, BONOBO_TYPE_DOCK))
# define newSVBonoboDock(val)	(gtk2perl_new_gtkobject (GTK_OBJECT (val)))
  typedef BonoboDock BonoboDock_ornull;
# define SvBonoboDock_ornull(sv)	(gperl_sv_is_defined (sv) ? SvBonoboDock(sv) : NULL)
# define newSVBonoboDock_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gtk2perl_new_gtkobject (GTK_OBJECT (val)))
#endif /* BONOBO_TYPE_DOCK */

#ifdef BONOBO_TYPE_DOCK_BAND
  /* GtkObject derivative BonoboDockBand */
# define SvBonoboDockBand(sv)	((BonoboDockBand*)gperl_get_object_check (sv, BONOBO_TYPE_DOCK_BAND))
# define newSVBonoboDockBand(val)	(gtk2perl_new_gtkobject (GTK_OBJECT (val)))
  typedef BonoboDockBand BonoboDockBand_ornull;
# define SvBonoboDockBand_ornull(sv)	(gperl_sv_is_defined (sv) ? SvBonoboDockBand(sv) : NULL)
# define newSVBonoboDockBand_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gtk2perl_new_gtkobject (GTK_OBJECT (val)))
#endif /* BONOBO_TYPE_DOCK_BAND */

#ifdef BONOBO_TYPE_DOCK_ITEM
  /* GtkObject derivative BonoboDockItem */
# define SvBonoboDockItem(sv)	((BonoboDockItem*)gperl_get_object_check (sv, BONOBO_TYPE_DOCK_ITEM))
# define newSVBonoboDockItem(val)	(gtk2perl_new_gtkobject (GTK_OBJECT (val)))
  typedef BonoboDockItem BonoboDockItem_ornull;
# define SvBonoboDockItem_ornull(sv)	(gperl_sv_is_defined (sv) ? SvBonoboDockItem(sv) : NULL)
# define newSVBonoboDockItem_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gtk2perl_new_gtkobject (GTK_OBJECT (val)))
#endif /* BONOBO_TYPE_DOCK_ITEM */

#ifdef BONOBO_TYPE_DOCK_ITEM_BEHAVIOR
  /* GFlags BonoboDockItemBehavior */
# define SvBonoboDockItemBehavior(sv)	((BonoboDockItemBehavior)gperl_convert_flags (BONOBO_TYPE_DOCK_ITEM_BEHAVIOR, sv))
# define newSVBonoboDockItemBehavior(val)	(gperl_convert_back_flags (BONOBO_TYPE_DOCK_ITEM_BEHAVIOR, val))
#endif /* BONOBO_TYPE_DOCK_ITEM_BEHAVIOR */

#ifdef BONOBO_TYPE_DOCK_LAYOUT
  /* GObject derivative BonoboDockLayout */
# define SvBonoboDockLayout(sv)	((BonoboDockLayout*)gperl_get_object_check (sv, BONOBO_TYPE_DOCK_LAYOUT))
# define newSVBonoboDockLayout(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef BonoboDockLayout BonoboDockLayout_ornull;
# define SvBonoboDockLayout_ornull(sv)	(gperl_sv_is_defined (sv) ? SvBonoboDockLayout(sv) : NULL)
# define newSVBonoboDockLayout_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef BonoboDockLayout BonoboDockLayout_noinc;
#define newSVBonoboDockLayout_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef BonoboDockLayout BonoboDockLayout_noinc_ornull;
#define newSVBonoboDockLayout_noinc_ornull(val)	((val) ? newSVBonoboDockLayout_noinc(val) : &PL_sv_undef)
#endif /* BONOBO_TYPE_DOCK_LAYOUT */

#ifdef BONOBO_TYPE_DOCK_PLACEMENT
  /* GEnum BonoboDockPlacement */
# define SvBonoboDockPlacement(sv)	((BonoboDockPlacement)gperl_convert_enum (BONOBO_TYPE_DOCK_PLACEMENT, sv))
# define newSVBonoboDockPlacement(val)	(gperl_convert_back_enum (BONOBO_TYPE_DOCK_PLACEMENT, val))
#endif /* BONOBO_TYPE_DOCK_PLACEMENT */

#ifdef GNOME_TYPE_ABOUT
  /* GtkObject derivative GnomeAbout */
# define SvGnomeAbout(sv)	((GnomeAbout*)gperl_get_object_check (sv, GNOME_TYPE_ABOUT))
# define newSVGnomeAbout(val)	(gtk2perl_new_gtkobject (GTK_OBJECT (val)))
  typedef GnomeAbout GnomeAbout_ornull;
# define SvGnomeAbout_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeAbout(sv) : NULL)
# define newSVGnomeAbout_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gtk2perl_new_gtkobject (GTK_OBJECT (val)))
#endif /* GNOME_TYPE_ABOUT */

#ifdef GNOME_TYPE_APP
  /* GtkObject derivative GnomeApp */
# define SvGnomeApp(sv)	((GnomeApp*)gperl_get_object_check (sv, GNOME_TYPE_APP))
# define newSVGnomeApp(val)	(gtk2perl_new_gtkobject (GTK_OBJECT (val)))
  typedef GnomeApp GnomeApp_ornull;
# define SvGnomeApp_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeApp(sv) : NULL)
# define newSVGnomeApp_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gtk2perl_new_gtkobject (GTK_OBJECT (val)))
#endif /* GNOME_TYPE_APP */

#ifdef GNOME_TYPE_APPBAR
  /* GtkObject derivative GnomeAppBar */
# define SvGnomeAppBar(sv)	((GnomeAppBar*)gperl_get_object_check (sv, GNOME_TYPE_APPBAR))
# define newSVGnomeAppBar(val)	(gtk2perl_new_gtkobject (GTK_OBJECT (val)))
  typedef GnomeAppBar GnomeAppBar_ornull;
# define SvGnomeAppBar_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeAppBar(sv) : NULL)
# define newSVGnomeAppBar_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gtk2perl_new_gtkobject (GTK_OBJECT (val)))
#endif /* GNOME_TYPE_APPBAR */

#ifdef GNOME_TYPE_CLIENT
  /* GtkObject derivative GnomeClient */
# define SvGnomeClient(sv)	((GnomeClient*)gperl_get_object_check (sv, GNOME_TYPE_CLIENT))
# define newSVGnomeClient(val)	(gtk2perl_new_gtkobject (GTK_OBJECT (val)))
  typedef GnomeClient GnomeClient_ornull;
# define SvGnomeClient_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeClient(sv) : NULL)
# define newSVGnomeClient_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gtk2perl_new_gtkobject (GTK_OBJECT (val)))
#endif /* GNOME_TYPE_CLIENT */

#ifdef GNOME_TYPE_CLIENT_FLAGS
  /* GFlags GnomeClientFlags */
# define SvGnomeClientFlags(sv)	((GnomeClientFlags)gperl_convert_flags (GNOME_TYPE_CLIENT_FLAGS, sv))
# define newSVGnomeClientFlags(val)	(gperl_convert_back_flags (GNOME_TYPE_CLIENT_FLAGS, val))
#endif /* GNOME_TYPE_CLIENT_FLAGS */

#ifdef GNOME_TYPE_CLIENT_STATE
  /* GEnum GnomeClientState */
# define SvGnomeClientState(sv)	((GnomeClientState)gperl_convert_enum (GNOME_TYPE_CLIENT_STATE, sv))
# define newSVGnomeClientState(val)	(gperl_convert_back_enum (GNOME_TYPE_CLIENT_STATE, val))
#endif /* GNOME_TYPE_CLIENT_STATE */

#ifdef GNOME_TYPE_COLOR_PICKER
  /* GtkObject derivative GnomeColorPicker */
# define SvGnomeColorPicker(sv)	((GnomeColorPicker*)gperl_get_object_check (sv, GNOME_TYPE_COLOR_PICKER))
# define newSVGnomeColorPicker(val)	(gtk2perl_new_gtkobject (GTK_OBJECT (val)))
  typedef GnomeColorPicker GnomeColorPicker_ornull;
# define SvGnomeColorPicker_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeColorPicker(sv) : NULL)
# define newSVGnomeColorPicker_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gtk2perl_new_gtkobject (GTK_OBJECT (val)))
#endif /* GNOME_TYPE_COLOR_PICKER */

#ifdef GNOME_TYPE_DATE_EDIT
  /* GtkObject derivative GnomeDateEdit */
# define SvGnomeDateEdit(sv)	((GnomeDateEdit*)gperl_get_object_check (sv, GNOME_TYPE_DATE_EDIT))
# define newSVGnomeDateEdit(val)	(gtk2perl_new_gtkobject (GTK_OBJECT (val)))
  typedef GnomeDateEdit GnomeDateEdit_ornull;
# define SvGnomeDateEdit_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeDateEdit(sv) : NULL)
# define newSVGnomeDateEdit_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gtk2perl_new_gtkobject (GTK_OBJECT (val)))
#endif /* GNOME_TYPE_DATE_EDIT */

#ifdef GNOME_TYPE_DATE_EDIT_FLAGS
  /* GFlags GnomeDateEditFlags */
# define SvGnomeDateEditFlags(sv)	((GnomeDateEditFlags)gperl_convert_flags (GNOME_TYPE_DATE_EDIT_FLAGS, sv))
# define newSVGnomeDateEditFlags(val)	(gperl_convert_back_flags (GNOME_TYPE_DATE_EDIT_FLAGS, val))
#endif /* GNOME_TYPE_DATE_EDIT_FLAGS */

#ifdef GNOME_TYPE_DIALOG_TYPE
  /* GEnum GnomeDialogType */
# define SvGnomeDialogType(sv)	((GnomeDialogType)gperl_convert_enum (GNOME_TYPE_DIALOG_TYPE, sv))
# define newSVGnomeDialogType(val)	(gperl_convert_back_enum (GNOME_TYPE_DIALOG_TYPE, val))
#endif /* GNOME_TYPE_DIALOG_TYPE */

#ifdef GNOME_TYPE_DRUID
  /* GtkObject derivative GnomeDruid */
# define SvGnomeDruid(sv)	((GnomeDruid*)gperl_get_object_check (sv, GNOME_TYPE_DRUID))
# define newSVGnomeDruid(val)	(gtk2perl_new_gtkobject (GTK_OBJECT (val)))
  typedef GnomeDruid GnomeDruid_ornull;
# define SvGnomeDruid_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeDruid(sv) : NULL)
# define newSVGnomeDruid_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gtk2perl_new_gtkobject (GTK_OBJECT (val)))
#endif /* GNOME_TYPE_DRUID */

#ifdef GNOME_TYPE_DRUID_PAGE
  /* GtkObject derivative GnomeDruidPage */
# define SvGnomeDruidPage(sv)	((GnomeDruidPage*)gperl_get_object_check (sv, GNOME_TYPE_DRUID_PAGE))
# define newSVGnomeDruidPage(val)	(gtk2perl_new_gtkobject (GTK_OBJECT (val)))
  typedef GnomeDruidPage GnomeDruidPage_ornull;
# define SvGnomeDruidPage_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeDruidPage(sv) : NULL)
# define newSVGnomeDruidPage_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gtk2perl_new_gtkobject (GTK_OBJECT (val)))
#endif /* GNOME_TYPE_DRUID_PAGE */

#ifdef GNOME_TYPE_DRUID_PAGE_EDGE
  /* GtkObject derivative GnomeDruidPageEdge */
# define SvGnomeDruidPageEdge(sv)	((GnomeDruidPageEdge*)gperl_get_object_check (sv, GNOME_TYPE_DRUID_PAGE_EDGE))
# define newSVGnomeDruidPageEdge(val)	(gtk2perl_new_gtkobject (GTK_OBJECT (val)))
  typedef GnomeDruidPageEdge GnomeDruidPageEdge_ornull;
# define SvGnomeDruidPageEdge_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeDruidPageEdge(sv) : NULL)
# define newSVGnomeDruidPageEdge_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gtk2perl_new_gtkobject (GTK_OBJECT (val)))
#endif /* GNOME_TYPE_DRUID_PAGE_EDGE */

#ifdef GNOME_TYPE_DRUID_PAGE_STANDARD
  /* GtkObject derivative GnomeDruidPageStandard */
# define SvGnomeDruidPageStandard(sv)	((GnomeDruidPageStandard*)gperl_get_object_check (sv, GNOME_TYPE_DRUID_PAGE_STANDARD))
# define newSVGnomeDruidPageStandard(val)	(gtk2perl_new_gtkobject (GTK_OBJECT (val)))
  typedef GnomeDruidPageStandard GnomeDruidPageStandard_ornull;
# define SvGnomeDruidPageStandard_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeDruidPageStandard(sv) : NULL)
# define newSVGnomeDruidPageStandard_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gtk2perl_new_gtkobject (GTK_OBJECT (val)))
#endif /* GNOME_TYPE_DRUID_PAGE_STANDARD */

#ifdef GNOME_TYPE_EDGE_POSITION
  /* GEnum GnomeEdgePosition */
# define SvGnomeEdgePosition(sv)	((GnomeEdgePosition)gperl_convert_enum (GNOME_TYPE_EDGE_POSITION, sv))
# define newSVGnomeEdgePosition(val)	(gperl_convert_back_enum (GNOME_TYPE_EDGE_POSITION, val))
#endif /* GNOME_TYPE_EDGE_POSITION */

#ifdef GNOME_TYPE_ENTRY
  /* GtkObject derivative GnomeEntry */
# define SvGnomeEntry(sv)	((GnomeEntry*)gperl_get_object_check (sv, GNOME_TYPE_ENTRY))
# define newSVGnomeEntry(val)	(gtk2perl_new_gtkobject (GTK_OBJECT (val)))
  typedef GnomeEntry GnomeEntry_ornull;
# define SvGnomeEntry_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeEntry(sv) : NULL)
# define newSVGnomeEntry_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gtk2perl_new_gtkobject (GTK_OBJECT (val)))
#endif /* GNOME_TYPE_ENTRY */

#ifdef GNOME_TYPE_FILE_DOMAIN
  /* GEnum GnomeFileDomain */
# define SvGnomeFileDomain(sv)	((GnomeFileDomain)gperl_convert_enum (GNOME_TYPE_FILE_DOMAIN, sv))
# define newSVGnomeFileDomain(val)	(gperl_convert_back_enum (GNOME_TYPE_FILE_DOMAIN, val))
#endif /* GNOME_TYPE_FILE_DOMAIN */

#ifdef GNOME_TYPE_FILE_ENTRY
  /* GtkObject derivative GnomeFileEntry */
# define SvGnomeFileEntry(sv)	((GnomeFileEntry*)gperl_get_object_check (sv, GNOME_TYPE_FILE_ENTRY))
# define newSVGnomeFileEntry(val)	(gtk2perl_new_gtkobject (GTK_OBJECT (val)))
  typedef GnomeFileEntry GnomeFileEntry_ornull;
# define SvGnomeFileEntry_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeFileEntry(sv) : NULL)
# define newSVGnomeFileEntry_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gtk2perl_new_gtkobject (GTK_OBJECT (val)))
#endif /* GNOME_TYPE_FILE_ENTRY */

#ifdef GNOME_TYPE_FONT_PICKER
  /* GtkObject derivative GnomeFontPicker */
# define SvGnomeFontPicker(sv)	((GnomeFontPicker*)gperl_get_object_check (sv, GNOME_TYPE_FONT_PICKER))
# define newSVGnomeFontPicker(val)	(gtk2perl_new_gtkobject (GTK_OBJECT (val)))
  typedef GnomeFontPicker GnomeFontPicker_ornull;
# define SvGnomeFontPicker_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeFontPicker(sv) : NULL)
# define newSVGnomeFontPicker_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gtk2perl_new_gtkobject (GTK_OBJECT (val)))
#endif /* GNOME_TYPE_FONT_PICKER */

#ifdef GNOME_TYPE_FONT_PICKER_MODE
  /* GEnum GnomeFontPickerMode */
# define SvGnomeFontPickerMode(sv)	((GnomeFontPickerMode)gperl_convert_enum (GNOME_TYPE_FONT_PICKER_MODE, sv))
# define newSVGnomeFontPickerMode(val)	(gperl_convert_back_enum (GNOME_TYPE_FONT_PICKER_MODE, val))
#endif /* GNOME_TYPE_FONT_PICKER_MODE */

#ifdef GNOME_TYPE_HELP_ERROR
  /* GEnum GnomeHelpError */
# define SvGnomeHelpError(sv)	((GnomeHelpError)gperl_convert_enum (GNOME_TYPE_HELP_ERROR, sv))
# define newSVGnomeHelpError(val)	(gperl_convert_back_enum (GNOME_TYPE_HELP_ERROR, val))
#endif /* GNOME_TYPE_HELP_ERROR */

#ifdef GNOME_TYPE_HREF
  /* GtkObject derivative GnomeHRef */
# define SvGnomeHRef(sv)	((GnomeHRef*)gperl_get_object_check (sv, GNOME_TYPE_HREF))
# define newSVGnomeHRef(val)	(gtk2perl_new_gtkobject (GTK_OBJECT (val)))
  typedef GnomeHRef GnomeHRef_ornull;
# define SvGnomeHRef_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeHRef(sv) : NULL)
# define newSVGnomeHRef_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gtk2perl_new_gtkobject (GTK_OBJECT (val)))
#endif /* GNOME_TYPE_HREF */

#ifdef GNOME_TYPE_ICON_ENTRY
  /* GtkObject derivative GnomeIconEntry */
# define SvGnomeIconEntry(sv)	((GnomeIconEntry*)gperl_get_object_check (sv, GNOME_TYPE_ICON_ENTRY))
# define newSVGnomeIconEntry(val)	(gtk2perl_new_gtkobject (GTK_OBJECT (val)))
  typedef GnomeIconEntry GnomeIconEntry_ornull;
# define SvGnomeIconEntry_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeIconEntry(sv) : NULL)
# define newSVGnomeIconEntry_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gtk2perl_new_gtkobject (GTK_OBJECT (val)))
#endif /* GNOME_TYPE_ICON_ENTRY */

#ifdef GNOME_TYPE_ICON_LIST
  /* GtkObject derivative GnomeIconList */
# define SvGnomeIconList(sv)	((GnomeIconList*)gperl_get_object_check (sv, GNOME_TYPE_ICON_LIST))
# define newSVGnomeIconList(val)	(gtk2perl_new_gtkobject (GTK_OBJECT (val)))
  typedef GnomeIconList GnomeIconList_ornull;
# define SvGnomeIconList_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeIconList(sv) : NULL)
# define newSVGnomeIconList_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gtk2perl_new_gtkobject (GTK_OBJECT (val)))
#endif /* GNOME_TYPE_ICON_LIST */

#ifdef GNOME_TYPE_ICON_LIST_MODE
  /* GEnum GnomeIconListMode */
# define SvGnomeIconListMode(sv)	((GnomeIconListMode)gperl_convert_enum (GNOME_TYPE_ICON_LIST_MODE, sv))
# define newSVGnomeIconListMode(val)	(gperl_convert_back_enum (GNOME_TYPE_ICON_LIST_MODE, val))
#endif /* GNOME_TYPE_ICON_LIST_MODE */

#ifdef GNOME_TYPE_ICON_LOOKUP_FLAGS
  /* GFlags GnomeIconLookupFlags */
# define SvGnomeIconLookupFlags(sv)	((GnomeIconLookupFlags)gperl_convert_flags (GNOME_TYPE_ICON_LOOKUP_FLAGS, sv))
# define newSVGnomeIconLookupFlags(val)	(gperl_convert_back_flags (GNOME_TYPE_ICON_LOOKUP_FLAGS, val))
#endif /* GNOME_TYPE_ICON_LOOKUP_FLAGS */

#ifdef GNOME_TYPE_ICON_LOOKUP_RESULT_FLAGS
  /* GFlags GnomeIconLookupResultFlags */
# define SvGnomeIconLookupResultFlags(sv)	((GnomeIconLookupResultFlags)gperl_convert_flags (GNOME_TYPE_ICON_LOOKUP_RESULT_FLAGS, sv))
# define newSVGnomeIconLookupResultFlags(val)	(gperl_convert_back_flags (GNOME_TYPE_ICON_LOOKUP_RESULT_FLAGS, val))
#endif /* GNOME_TYPE_ICON_LOOKUP_RESULT_FLAGS */

#ifdef GNOME_TYPE_ICON_SELECTION
  /* GtkObject derivative GnomeIconSelection */
# define SvGnomeIconSelection(sv)	((GnomeIconSelection*)gperl_get_object_check (sv, GNOME_TYPE_ICON_SELECTION))
# define newSVGnomeIconSelection(val)	(gtk2perl_new_gtkobject (GTK_OBJECT (val)))
  typedef GnomeIconSelection GnomeIconSelection_ornull;
# define SvGnomeIconSelection_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeIconSelection(sv) : NULL)
# define newSVGnomeIconSelection_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gtk2perl_new_gtkobject (GTK_OBJECT (val)))
#endif /* GNOME_TYPE_ICON_SELECTION */

#ifdef GNOME_TYPE_ICON_TEXT_ITEM
  /* GtkObject derivative GnomeIconTextItem */
# define SvGnomeIconTextItem(sv)	((GnomeIconTextItem*)gperl_get_object_check (sv, GNOME_TYPE_ICON_TEXT_ITEM))
# define newSVGnomeIconTextItem(val)	(gtk2perl_new_gtkobject (GTK_OBJECT (val)))
  typedef GnomeIconTextItem GnomeIconTextItem_ornull;
# define SvGnomeIconTextItem_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeIconTextItem(sv) : NULL)
# define newSVGnomeIconTextItem_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gtk2perl_new_gtkobject (GTK_OBJECT (val)))
#endif /* GNOME_TYPE_ICON_TEXT_ITEM */

#ifdef GNOME_TYPE_ICON_THEME
  /* GObject derivative GnomeIconTheme */
# define SvGnomeIconTheme(sv)	((GnomeIconTheme*)gperl_get_object_check (sv, GNOME_TYPE_ICON_THEME))
# define newSVGnomeIconTheme(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef GnomeIconTheme GnomeIconTheme_ornull;
# define SvGnomeIconTheme_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeIconTheme(sv) : NULL)
# define newSVGnomeIconTheme_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef GnomeIconTheme GnomeIconTheme_noinc;
#define newSVGnomeIconTheme_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef GnomeIconTheme GnomeIconTheme_noinc_ornull;
#define newSVGnomeIconTheme_noinc_ornull(val)	((val) ? newSVGnomeIconTheme_noinc(val) : &PL_sv_undef)
#endif /* GNOME_TYPE_ICON_THEME */

#ifdef GNOME_TYPE_INTERACT_STYLE
  /* GEnum GnomeInteractStyle */
# define SvGnomeInteractStyle(sv)	((GnomeInteractStyle)gperl_convert_enum (GNOME_TYPE_INTERACT_STYLE, sv))
# define newSVGnomeInteractStyle(val)	(gperl_convert_back_enum (GNOME_TYPE_INTERACT_STYLE, val))
#endif /* GNOME_TYPE_INTERACT_STYLE */

#ifdef GNOME_TYPE_MDI_MODE
  /* GEnum GnomeMDIMode */
# define SvGnomeMDIMode(sv)	((GnomeMDIMode)gperl_convert_enum (GNOME_TYPE_MDI_MODE, sv))
# define newSVGnomeMDIMode(val)	(gperl_convert_back_enum (GNOME_TYPE_MDI_MODE, val))
#endif /* GNOME_TYPE_MDI_MODE */

#ifdef GNOME_TYPE_MODULE_INFO
  /* GBoxed GnomeModuleInfo */
  typedef GnomeModuleInfo GnomeModuleInfo_ornull;
# define SvGnomeModuleInfo(sv)	((GnomeModuleInfo *) gperl_get_boxed_check ((sv), GNOME_TYPE_MODULE_INFO))
# define SvGnomeModuleInfo_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeModuleInfo (sv) : NULL)
  typedef GnomeModuleInfo GnomeModuleInfo_own;
  typedef GnomeModuleInfo GnomeModuleInfo_copy;
  typedef GnomeModuleInfo GnomeModuleInfo_own_ornull;
# define newSVGnomeModuleInfo(val)	(gperl_new_boxed ((gpointer) (val), GNOME_TYPE_MODULE_INFO, FALSE))
# define newSVGnomeModuleInfo_ornull(val)	((val) ? newSVGnomeModuleInfo(val) : &PL_sv_undef)
# define newSVGnomeModuleInfo_own(val)	(gperl_new_boxed ((gpointer) (val), GNOME_TYPE_MODULE_INFO, TRUE))
# define newSVGnomeModuleInfo_copy(val)	(gperl_new_boxed_copy ((gpointer) (val), GNOME_TYPE_MODULE_INFO))
# define newSVGnomeModuleInfo_own_ornull(val)	((val) ? newSVGnomeModuleInfo_own(val) : &PL_sv_undef)
#endif /* GNOME_TYPE_MODULE_INFO */

#ifdef GNOME_TYPE_PASSWORD_DIALOG
  /* GtkObject derivative GnomePasswordDialog */
# define SvGnomePasswordDialog(sv)	((GnomePasswordDialog*)gperl_get_object_check (sv, GNOME_TYPE_PASSWORD_DIALOG))
# define newSVGnomePasswordDialog(val)	(gtk2perl_new_gtkobject (GTK_OBJECT (val)))
  typedef GnomePasswordDialog GnomePasswordDialog_ornull;
# define SvGnomePasswordDialog_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomePasswordDialog(sv) : NULL)
# define newSVGnomePasswordDialog_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gtk2perl_new_gtkobject (GTK_OBJECT (val)))
#endif /* GNOME_TYPE_PASSWORD_DIALOG */

#ifdef GNOME_TYPE_PASSWORD_DIALOG_REMEMBER
  /* GEnum GnomePasswordDialogRemember */
# define SvGnomePasswordDialogRemember(sv)	((GnomePasswordDialogRemember)gperl_convert_enum (GNOME_TYPE_PASSWORD_DIALOG_REMEMBER, sv))
# define newSVGnomePasswordDialogRemember(val)	(gperl_convert_back_enum (GNOME_TYPE_PASSWORD_DIALOG_REMEMBER, val))
#endif /* GNOME_TYPE_PASSWORD_DIALOG_REMEMBER */

#ifdef GNOME_TYPE_PIXMAP_ENTRY
  /* GtkObject derivative GnomePixmapEntry */
# define SvGnomePixmapEntry(sv)	((GnomePixmapEntry*)gperl_get_object_check (sv, GNOME_TYPE_PIXMAP_ENTRY))
# define newSVGnomePixmapEntry(val)	(gtk2perl_new_gtkobject (GTK_OBJECT (val)))
  typedef GnomePixmapEntry GnomePixmapEntry_ornull;
# define SvGnomePixmapEntry_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomePixmapEntry(sv) : NULL)
# define newSVGnomePixmapEntry_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gtk2perl_new_gtkobject (GTK_OBJECT (val)))
#endif /* GNOME_TYPE_PIXMAP_ENTRY */

#ifdef GNOME_TYPE_PREFERENCES_TYPE
  /* GEnum GnomePreferencesType */
# define SvGnomePreferencesType(sv)	((GnomePreferencesType)gperl_convert_enum (GNOME_TYPE_PREFERENCES_TYPE, sv))
# define newSVGnomePreferencesType(val)	(gperl_convert_back_enum (GNOME_TYPE_PREFERENCES_TYPE, val))
#endif /* GNOME_TYPE_PREFERENCES_TYPE */

#ifdef GNOME_TYPE_PROGRAM
  /* GObject derivative GnomeProgram */
# define SvGnomeProgram(sv)	((GnomeProgram*)gperl_get_object_check (sv, GNOME_TYPE_PROGRAM))
# define newSVGnomeProgram(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef GnomeProgram GnomeProgram_ornull;
# define SvGnomeProgram_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeProgram(sv) : NULL)
# define newSVGnomeProgram_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef GnomeProgram GnomeProgram_noinc;
#define newSVGnomeProgram_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef GnomeProgram GnomeProgram_noinc_ornull;
#define newSVGnomeProgram_noinc_ornull(val)	((val) ? newSVGnomeProgram_noinc(val) : &PL_sv_undef)
#endif /* GNOME_TYPE_PROGRAM */

#ifdef GNOME_TYPE_RESTART_STYLE
  /* GEnum GnomeRestartStyle */
# define SvGnomeRestartStyle(sv)	((GnomeRestartStyle)gperl_convert_enum (GNOME_TYPE_RESTART_STYLE, sv))
# define newSVGnomeRestartStyle(val)	(gperl_convert_back_enum (GNOME_TYPE_RESTART_STYLE, val))
#endif /* GNOME_TYPE_RESTART_STYLE */

#ifdef GNOME_TYPE_SAVE_STYLE
  /* GEnum GnomeSaveStyle */
# define SvGnomeSaveStyle(sv)	((GnomeSaveStyle)gperl_convert_enum (GNOME_TYPE_SAVE_STYLE, sv))
# define newSVGnomeSaveStyle(val)	(gperl_convert_back_enum (GNOME_TYPE_SAVE_STYLE, val))
#endif /* GNOME_TYPE_SAVE_STYLE */

#ifdef GNOME_TYPE_SCORES
  /* GtkObject derivative GnomeScores */
# define SvGnomeScores(sv)	((GnomeScores*)gperl_get_object_check (sv, GNOME_TYPE_SCORES))
# define newSVGnomeScores(val)	(gtk2perl_new_gtkobject (GTK_OBJECT (val)))
  typedef GnomeScores GnomeScores_ornull;
# define SvGnomeScores_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeScores(sv) : NULL)
# define newSVGnomeScores_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gtk2perl_new_gtkobject (GTK_OBJECT (val)))
#endif /* GNOME_TYPE_SCORES */

#ifdef GNOME_TYPE_THUMBNAIL_FACTORY
  /* GObject derivative GnomeThumbnailFactory */
# define SvGnomeThumbnailFactory(sv)	((GnomeThumbnailFactory*)gperl_get_object_check (sv, GNOME_TYPE_THUMBNAIL_FACTORY))
# define newSVGnomeThumbnailFactory(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef GnomeThumbnailFactory GnomeThumbnailFactory_ornull;
# define SvGnomeThumbnailFactory_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeThumbnailFactory(sv) : NULL)
# define newSVGnomeThumbnailFactory_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef GnomeThumbnailFactory GnomeThumbnailFactory_noinc;
#define newSVGnomeThumbnailFactory_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef GnomeThumbnailFactory GnomeThumbnailFactory_noinc_ornull;
#define newSVGnomeThumbnailFactory_noinc_ornull(val)	((val) ? newSVGnomeThumbnailFactory_noinc(val) : &PL_sv_undef)
#endif /* GNOME_TYPE_THUMBNAIL_FACTORY */

#ifdef GNOME_TYPE_THUMBNAIL_SIZE
  /* GEnum GnomeThumbnailSize */
# define SvGnomeThumbnailSize(sv)	((GnomeThumbnailSize)gperl_convert_enum (GNOME_TYPE_THUMBNAIL_SIZE, sv))
# define newSVGnomeThumbnailSize(val)	(gperl_convert_back_enum (GNOME_TYPE_THUMBNAIL_SIZE, val))
#endif /* GNOME_TYPE_THUMBNAIL_SIZE */

#ifdef GNOME_TYPE_TRIGGER_TYPE
  /* GEnum GnomeTriggerType */
# define SvGnomeTriggerType(sv)	((GnomeTriggerType)gperl_convert_enum (GNOME_TYPE_TRIGGER_TYPE, sv))
# define newSVGnomeTriggerType(val)	(gperl_convert_back_enum (GNOME_TYPE_TRIGGER_TYPE, val))
#endif /* GNOME_TYPE_TRIGGER_TYPE */

#ifdef GNOME_TYPE_UI_INFO_CONFIGURABLE_TYPES
  /* GEnum GnomeUIInfoConfigurableTypes */
# define SvGnomeUIInfoConfigurableTypes(sv)	((GnomeUIInfoConfigurableTypes)gperl_convert_enum (GNOME_TYPE_UI_INFO_CONFIGURABLE_TYPES, sv))
# define newSVGnomeUIInfoConfigurableTypes(val)	(gperl_convert_back_enum (GNOME_TYPE_UI_INFO_CONFIGURABLE_TYPES, val))
#endif /* GNOME_TYPE_UI_INFO_CONFIGURABLE_TYPES */

#ifdef GNOME_TYPE_UI_INFO_TYPE
  /* GEnum GnomeUIInfoType */
# define SvGnomeUIInfoType(sv)	((GnomeUIInfoType)gperl_convert_enum (GNOME_TYPE_UI_INFO_TYPE, sv))
# define newSVGnomeUIInfoType(val)	(gperl_convert_back_enum (GNOME_TYPE_UI_INFO_TYPE, val))
#endif /* GNOME_TYPE_UI_INFO_TYPE */

#ifdef GNOME_TYPE_UI_PIXMAP_TYPE
  /* GEnum GnomeUIPixmapType */
# define SvGnomeUIPixmapType(sv)	((GnomeUIPixmapType)gperl_convert_enum (GNOME_TYPE_UI_PIXMAP_TYPE, sv))
# define newSVGnomeUIPixmapType(val)	(gperl_convert_back_enum (GNOME_TYPE_UI_PIXMAP_TYPE, val))
#endif /* GNOME_TYPE_UI_PIXMAP_TYPE */

#ifdef GNOME_TYPE_URL_ERROR
  /* GEnum GnomeURLError */
# define SvGnomeURLError(sv)	((GnomeURLError)gperl_convert_enum (GNOME_TYPE_URL_ERROR, sv))
# define newSVGnomeURLError(val)	(gperl_convert_back_enum (GNOME_TYPE_URL_ERROR, val))
#endif /* GNOME_TYPE_URL_ERROR */
