/* This file is automatically generated. Any changes made here will be lost. */

/* This header defines simple perlapi-ish macros for creating SV wrappers
 * and extracting the GPerl value from SV wrappers.  These macros are used
 * by the autogenerated typemaps, and are defined here so that you can use
 * the same logic anywhere in your code (e.g., if you handle the argument
 * stack by hand instead of using the typemap). */

#ifdef GNOME_VFS_MIME_MONITOR_TYPE
  /* GObject derivative GnomeVFSMIMEMonitor */
# define SvGnomeVFSMIMEMonitor(sv)	((GnomeVFSMIMEMonitor*)gperl_get_object_check (sv, GNOME_VFS_MIME_MONITOR_TYPE))
# define newSVGnomeVFSMIMEMonitor(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef GnomeVFSMIMEMonitor GnomeVFSMIMEMonitor_ornull;
# define SvGnomeVFSMIMEMonitor_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeVFSMIMEMonitor(sv) : NULL)
# define newSVGnomeVFSMIMEMonitor_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef GnomeVFSMIMEMonitor GnomeVFSMIMEMonitor_noinc;
#define newSVGnomeVFSMIMEMonitor_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef GnomeVFSMIMEMonitor GnomeVFSMIMEMonitor_noinc_ornull;
#define newSVGnomeVFSMIMEMonitor_noinc_ornull(val)	((val) ? newSVGnomeVFSMIMEMonitor_noinc(val) : &PL_sv_undef)
#endif /* GNOME_VFS_MIME_MONITOR_TYPE */

#ifdef GNOME_VFS_TYPE_VFS_DIRECTORY_VISIT_OPTIONS
  /* GFlags GnomeVFSDirectoryVisitOptions */
# define SvGnomeVFSDirectoryVisitOptions(sv)	((GnomeVFSDirectoryVisitOptions)gperl_convert_flags (GNOME_VFS_TYPE_VFS_DIRECTORY_VISIT_OPTIONS, sv))
# define newSVGnomeVFSDirectoryVisitOptions(val)	(gperl_convert_back_flags (GNOME_VFS_TYPE_VFS_DIRECTORY_VISIT_OPTIONS, val))
#endif /* GNOME_VFS_TYPE_VFS_DIRECTORY_VISIT_OPTIONS */

#ifdef GNOME_VFS_TYPE_VFS_FILE_FLAGS
  /* GFlags GnomeVFSFileFlags */
# define SvGnomeVFSFileFlags(sv)	((GnomeVFSFileFlags)gperl_convert_flags (GNOME_VFS_TYPE_VFS_FILE_FLAGS, sv))
# define newSVGnomeVFSFileFlags(val)	(gperl_convert_back_flags (GNOME_VFS_TYPE_VFS_FILE_FLAGS, val))
#endif /* GNOME_VFS_TYPE_VFS_FILE_FLAGS */

#ifdef GNOME_VFS_TYPE_VFS_FILE_INFO_FIELDS
  /* GFlags GnomeVFSFileInfoFields */
# define SvGnomeVFSFileInfoFields(sv)	((GnomeVFSFileInfoFields)gperl_convert_flags (GNOME_VFS_TYPE_VFS_FILE_INFO_FIELDS, sv))
# define newSVGnomeVFSFileInfoFields(val)	(gperl_convert_back_flags (GNOME_VFS_TYPE_VFS_FILE_INFO_FIELDS, val))
#endif /* GNOME_VFS_TYPE_VFS_FILE_INFO_FIELDS */

#ifdef GNOME_VFS_TYPE_VFS_FILE_INFO_OPTIONS
  /* GFlags GnomeVFSFileInfoOptions */
# define SvGnomeVFSFileInfoOptions(sv)	((GnomeVFSFileInfoOptions)gperl_convert_flags (GNOME_VFS_TYPE_VFS_FILE_INFO_OPTIONS, sv))
# define newSVGnomeVFSFileInfoOptions(val)	(gperl_convert_back_flags (GNOME_VFS_TYPE_VFS_FILE_INFO_OPTIONS, val))
#endif /* GNOME_VFS_TYPE_VFS_FILE_INFO_OPTIONS */

#ifdef GNOME_VFS_TYPE_VFS_FILE_PERMISSIONS
  /* GFlags GnomeVFSFilePermissions */
# define SvGnomeVFSFilePermissions(sv)	((GnomeVFSFilePermissions)gperl_convert_flags (GNOME_VFS_TYPE_VFS_FILE_PERMISSIONS, sv))
# define newSVGnomeVFSFilePermissions(val)	(gperl_convert_back_flags (GNOME_VFS_TYPE_VFS_FILE_PERMISSIONS, val))
#endif /* GNOME_VFS_TYPE_VFS_FILE_PERMISSIONS */

#ifdef GNOME_VFS_TYPE_VFS_MAKE_URI_DIRS
  /* GFlags GnomeVFSMakeURIDirs */
# define SvGnomeVFSMakeURIDirs(sv)	((GnomeVFSMakeURIDirs)gperl_convert_flags (GNOME_VFS_TYPE_VFS_MAKE_URI_DIRS, sv))
# define newSVGnomeVFSMakeURIDirs(val)	(gperl_convert_back_flags (GNOME_VFS_TYPE_VFS_MAKE_URI_DIRS, val))
#endif /* GNOME_VFS_TYPE_VFS_MAKE_URI_DIRS */

#ifdef GNOME_VFS_TYPE_VFS_OPEN_MODE
  /* GFlags GnomeVFSOpenMode */
# define SvGnomeVFSOpenMode(sv)	((GnomeVFSOpenMode)gperl_convert_flags (GNOME_VFS_TYPE_VFS_OPEN_MODE, sv))
# define newSVGnomeVFSOpenMode(val)	(gperl_convert_back_flags (GNOME_VFS_TYPE_VFS_OPEN_MODE, val))
#endif /* GNOME_VFS_TYPE_VFS_OPEN_MODE */

#ifdef GNOME_VFS_TYPE_VFS_SET_FILE_INFO_MASK
  /* GFlags GnomeVFSSetFileInfoMask */
# define SvGnomeVFSSetFileInfoMask(sv)	((GnomeVFSSetFileInfoMask)gperl_convert_flags (GNOME_VFS_TYPE_VFS_SET_FILE_INFO_MASK, sv))
# define newSVGnomeVFSSetFileInfoMask(val)	(gperl_convert_back_flags (GNOME_VFS_TYPE_VFS_SET_FILE_INFO_MASK, val))
#endif /* GNOME_VFS_TYPE_VFS_SET_FILE_INFO_MASK */

#ifdef GNOME_VFS_TYPE_VFS_URI_HIDE_OPTIONS
  /* GFlags GnomeVFSURIHideOptions */
# define SvGnomeVFSURIHideOptions(sv)	((GnomeVFSURIHideOptions)gperl_convert_flags (GNOME_VFS_TYPE_VFS_URI_HIDE_OPTIONS, sv))
# define newSVGnomeVFSURIHideOptions(val)	(gperl_convert_back_flags (GNOME_VFS_TYPE_VFS_URI_HIDE_OPTIONS, val))
#endif /* GNOME_VFS_TYPE_VFS_URI_HIDE_OPTIONS */

#ifdef GNOME_VFS_TYPE_VFS_XFER_OPTIONS
  /* GFlags GnomeVFSXferOptions */
# define SvGnomeVFSXferOptions(sv)	((GnomeVFSXferOptions)gperl_convert_flags (GNOME_VFS_TYPE_VFS_XFER_OPTIONS, sv))
# define newSVGnomeVFSXferOptions(val)	(gperl_convert_back_flags (GNOME_VFS_TYPE_VFS_XFER_OPTIONS, val))
#endif /* GNOME_VFS_TYPE_VFS_XFER_OPTIONS */

#ifdef GNOME_VFS_TYPE_VFS_FILE_TYPE
  /* GEnum GnomeVFSFileType */
# define SvGnomeVFSFileType(sv)	((GnomeVFSFileType)gperl_convert_enum (GNOME_VFS_TYPE_VFS_FILE_TYPE, sv))
# define newSVGnomeVFSFileType(val)	(gperl_convert_back_enum (GNOME_VFS_TYPE_VFS_FILE_TYPE, val))
#endif /* GNOME_VFS_TYPE_VFS_FILE_TYPE */

#ifdef GNOME_VFS_TYPE_VFS_FIND_DIRECTORY_KIND
  /* GEnum GnomeVFSFindDirectoryKind */
# define SvGnomeVFSFindDirectoryKind(sv)	((GnomeVFSFindDirectoryKind)gperl_convert_enum (GNOME_VFS_TYPE_VFS_FIND_DIRECTORY_KIND, sv))
# define newSVGnomeVFSFindDirectoryKind(val)	(gperl_convert_back_enum (GNOME_VFS_TYPE_VFS_FIND_DIRECTORY_KIND, val))
#endif /* GNOME_VFS_TYPE_VFS_FIND_DIRECTORY_KIND */

#ifdef GNOME_VFS_TYPE_VFS_MIME_ACTION_TYPE
  /* GEnum GnomeVFSMimeActionType */
# define SvGnomeVFSMimeActionType(sv)	((GnomeVFSMimeActionType)gperl_convert_enum (GNOME_VFS_TYPE_VFS_MIME_ACTION_TYPE, sv))
# define newSVGnomeVFSMimeActionType(val)	(gperl_convert_back_enum (GNOME_VFS_TYPE_VFS_MIME_ACTION_TYPE, val))
#endif /* GNOME_VFS_TYPE_VFS_MIME_ACTION_TYPE */

#ifdef GNOME_VFS_TYPE_VFS_MIME_APPLICATION_ARGUMENT_TYPE
  /* GEnum GnomeVFSMimeApplicationArgumentType */
# define SvGnomeVFSMimeApplicationArgumentType(sv)	((GnomeVFSMimeApplicationArgumentType)gperl_convert_enum (GNOME_VFS_TYPE_VFS_MIME_APPLICATION_ARGUMENT_TYPE, sv))
# define newSVGnomeVFSMimeApplicationArgumentType(val)	(gperl_convert_back_enum (GNOME_VFS_TYPE_VFS_MIME_APPLICATION_ARGUMENT_TYPE, val))
#endif /* GNOME_VFS_TYPE_VFS_MIME_APPLICATION_ARGUMENT_TYPE */

#ifdef GNOME_VFS_TYPE_VFS_MONITOR_EVENT_TYPE
  /* GEnum GnomeVFSMonitorEventType */
# define SvGnomeVFSMonitorEventType(sv)	((GnomeVFSMonitorEventType)gperl_convert_enum (GNOME_VFS_TYPE_VFS_MONITOR_EVENT_TYPE, sv))
# define newSVGnomeVFSMonitorEventType(val)	(gperl_convert_back_enum (GNOME_VFS_TYPE_VFS_MONITOR_EVENT_TYPE, val))
#endif /* GNOME_VFS_TYPE_VFS_MONITOR_EVENT_TYPE */

#ifdef GNOME_VFS_TYPE_VFS_MONITOR_TYPE
  /* GEnum GnomeVFSMonitorType */
# define SvGnomeVFSMonitorType(sv)	((GnomeVFSMonitorType)gperl_convert_enum (GNOME_VFS_TYPE_VFS_MONITOR_TYPE, sv))
# define newSVGnomeVFSMonitorType(val)	(gperl_convert_back_enum (GNOME_VFS_TYPE_VFS_MONITOR_TYPE, val))
#endif /* GNOME_VFS_TYPE_VFS_MONITOR_TYPE */

#ifdef GNOME_VFS_TYPE_VFS_RESULT
  /* GEnum GnomeVFSResult */
# define SvGnomeVFSResult(sv)	((GnomeVFSResult)gperl_convert_enum (GNOME_VFS_TYPE_VFS_RESULT, sv))
# define newSVGnomeVFSResult(val)	(gperl_convert_back_enum (GNOME_VFS_TYPE_VFS_RESULT, val))
#endif /* GNOME_VFS_TYPE_VFS_RESULT */

#ifdef GNOME_VFS_TYPE_VFS_SEEK_POSITION
  /* GEnum GnomeVFSSeekPosition */
# define SvGnomeVFSSeekPosition(sv)	((GnomeVFSSeekPosition)gperl_convert_enum (GNOME_VFS_TYPE_VFS_SEEK_POSITION, sv))
# define newSVGnomeVFSSeekPosition(val)	(gperl_convert_back_enum (GNOME_VFS_TYPE_VFS_SEEK_POSITION, val))
#endif /* GNOME_VFS_TYPE_VFS_SEEK_POSITION */

#ifdef GNOME_VFS_TYPE_VFS_XFER_ERROR_ACTION
  /* GEnum GnomeVFSXferErrorAction */
# define SvGnomeVFSXferErrorAction(sv)	((GnomeVFSXferErrorAction)gperl_convert_enum (GNOME_VFS_TYPE_VFS_XFER_ERROR_ACTION, sv))
# define newSVGnomeVFSXferErrorAction(val)	(gperl_convert_back_enum (GNOME_VFS_TYPE_VFS_XFER_ERROR_ACTION, val))
#endif /* GNOME_VFS_TYPE_VFS_XFER_ERROR_ACTION */

#ifdef GNOME_VFS_TYPE_VFS_XFER_ERROR_MODE
  /* GEnum GnomeVFSXferErrorMode */
# define SvGnomeVFSXferErrorMode(sv)	((GnomeVFSXferErrorMode)gperl_convert_enum (GNOME_VFS_TYPE_VFS_XFER_ERROR_MODE, sv))
# define newSVGnomeVFSXferErrorMode(val)	(gperl_convert_back_enum (GNOME_VFS_TYPE_VFS_XFER_ERROR_MODE, val))
#endif /* GNOME_VFS_TYPE_VFS_XFER_ERROR_MODE */

#ifdef GNOME_VFS_TYPE_VFS_XFER_OVERWRITE_ACTION
  /* GEnum GnomeVFSXferOverwriteAction */
# define SvGnomeVFSXferOverwriteAction(sv)	((GnomeVFSXferOverwriteAction)gperl_convert_enum (GNOME_VFS_TYPE_VFS_XFER_OVERWRITE_ACTION, sv))
# define newSVGnomeVFSXferOverwriteAction(val)	(gperl_convert_back_enum (GNOME_VFS_TYPE_VFS_XFER_OVERWRITE_ACTION, val))
#endif /* GNOME_VFS_TYPE_VFS_XFER_OVERWRITE_ACTION */

#ifdef GNOME_VFS_TYPE_VFS_XFER_OVERWRITE_MODE
  /* GEnum GnomeVFSXferOverwriteMode */
# define SvGnomeVFSXferOverwriteMode(sv)	((GnomeVFSXferOverwriteMode)gperl_convert_enum (GNOME_VFS_TYPE_VFS_XFER_OVERWRITE_MODE, sv))
# define newSVGnomeVFSXferOverwriteMode(val)	(gperl_convert_back_enum (GNOME_VFS_TYPE_VFS_XFER_OVERWRITE_MODE, val))
#endif /* GNOME_VFS_TYPE_VFS_XFER_OVERWRITE_MODE */

#ifdef GNOME_VFS_TYPE_VFS_XFER_PHASE
  /* GEnum GnomeVFSXferPhase */
# define SvGnomeVFSXferPhase(sv)	((GnomeVFSXferPhase)gperl_convert_enum (GNOME_VFS_TYPE_VFS_XFER_PHASE, sv))
# define newSVGnomeVFSXferPhase(val)	(gperl_convert_back_enum (GNOME_VFS_TYPE_VFS_XFER_PHASE, val))
#endif /* GNOME_VFS_TYPE_VFS_XFER_PHASE */

#ifdef GNOME_VFS_TYPE_VFS_XFER_PROGRESS_STATUS
  /* GEnum GnomeVFSXferProgressStatus */
# define SvGnomeVFSXferProgressStatus(sv)	((GnomeVFSXferProgressStatus)gperl_convert_enum (GNOME_VFS_TYPE_VFS_XFER_PROGRESS_STATUS, sv))
# define newSVGnomeVFSXferProgressStatus(val)	(gperl_convert_back_enum (GNOME_VFS_TYPE_VFS_XFER_PROGRESS_STATUS, val))
#endif /* GNOME_VFS_TYPE_VFS_XFER_PROGRESS_STATUS */

#ifdef GNOME_VFS_TYPE_VFS_URI
  /* GBoxed GnomeVFSURI */
  typedef GnomeVFSURI GnomeVFSURI_ornull;
# define SvGnomeVFSURI(sv)	((GnomeVFSURI *) gperl_get_boxed_check ((sv), GNOME_VFS_TYPE_VFS_URI))
# define SvGnomeVFSURI_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeVFSURI (sv) : NULL)
  typedef GnomeVFSURI GnomeVFSURI_own;
  typedef GnomeVFSURI GnomeVFSURI_copy;
  typedef GnomeVFSURI GnomeVFSURI_own_ornull;
# define newSVGnomeVFSURI(val)	(gperl_new_boxed ((gpointer) (val), GNOME_VFS_TYPE_VFS_URI, FALSE))
# define newSVGnomeVFSURI_ornull(val)	((val) ? newSVGnomeVFSURI(val) : &PL_sv_undef)
# define newSVGnomeVFSURI_own(val)	(gperl_new_boxed ((gpointer) (val), GNOME_VFS_TYPE_VFS_URI, TRUE))
# define newSVGnomeVFSURI_copy(val)	(gperl_new_boxed_copy ((gpointer) (val), GNOME_VFS_TYPE_VFS_URI))
# define newSVGnomeVFSURI_own_ornull(val)	((val) ? newSVGnomeVFSURI_own(val) : &PL_sv_undef)
#endif /* GNOME_VFS_TYPE_VFS_URI */

#ifdef GNOME_VFS_TYPE_DRIVE
  /* GObject derivative GnomeVFSDrive */
# define SvGnomeVFSDrive(sv)	((GnomeVFSDrive*)gperl_get_object_check (sv, GNOME_VFS_TYPE_DRIVE))
# define newSVGnomeVFSDrive(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef GnomeVFSDrive GnomeVFSDrive_ornull;
# define SvGnomeVFSDrive_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeVFSDrive(sv) : NULL)
# define newSVGnomeVFSDrive_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef GnomeVFSDrive GnomeVFSDrive_noinc;
#define newSVGnomeVFSDrive_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef GnomeVFSDrive GnomeVFSDrive_noinc_ornull;
#define newSVGnomeVFSDrive_noinc_ornull(val)	((val) ? newSVGnomeVFSDrive_noinc(val) : &PL_sv_undef)
#endif /* GNOME_VFS_TYPE_DRIVE */

#ifdef GNOME_VFS_TYPE_VOLUME
  /* GObject derivative GnomeVFSVolume */
# define SvGnomeVFSVolume(sv)	((GnomeVFSVolume*)gperl_get_object_check (sv, GNOME_VFS_TYPE_VOLUME))
# define newSVGnomeVFSVolume(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef GnomeVFSVolume GnomeVFSVolume_ornull;
# define SvGnomeVFSVolume_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeVFSVolume(sv) : NULL)
# define newSVGnomeVFSVolume_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef GnomeVFSVolume GnomeVFSVolume_noinc;
#define newSVGnomeVFSVolume_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef GnomeVFSVolume GnomeVFSVolume_noinc_ornull;
#define newSVGnomeVFSVolume_noinc_ornull(val)	((val) ? newSVGnomeVFSVolume_noinc(val) : &PL_sv_undef)
#endif /* GNOME_VFS_TYPE_VOLUME */

#ifdef GNOME_VFS_TYPE_VOLUME_MONITOR
  /* GObject derivative GnomeVFSVolumeMonitor */
# define SvGnomeVFSVolumeMonitor(sv)	((GnomeVFSVolumeMonitor*)gperl_get_object_check (sv, GNOME_VFS_TYPE_VOLUME_MONITOR))
# define newSVGnomeVFSVolumeMonitor(val)	(gperl_new_object (G_OBJECT (val), FALSE))
  typedef GnomeVFSVolumeMonitor GnomeVFSVolumeMonitor_ornull;
# define SvGnomeVFSVolumeMonitor_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeVFSVolumeMonitor(sv) : NULL)
# define newSVGnomeVFSVolumeMonitor_ornull(val)	(((val) == NULL) ? &PL_sv_undef : gperl_new_object (G_OBJECT (val), FALSE))
typedef GnomeVFSVolumeMonitor GnomeVFSVolumeMonitor_noinc;
#define newSVGnomeVFSVolumeMonitor_noinc(val)	(gperl_new_object (G_OBJECT (val), TRUE))
typedef GnomeVFSVolumeMonitor GnomeVFSVolumeMonitor_noinc_ornull;
#define newSVGnomeVFSVolumeMonitor_noinc_ornull(val)	((val) ? newSVGnomeVFSVolumeMonitor_noinc(val) : &PL_sv_undef)
#endif /* GNOME_VFS_TYPE_VOLUME_MONITOR */

#ifdef GNOME_VFS_TYPE_VFS_DEVICE_TYPE
  /* GEnum GnomeVFSDeviceType */
# define SvGnomeVFSDeviceType(sv)	((GnomeVFSDeviceType)gperl_convert_enum (GNOME_VFS_TYPE_VFS_DEVICE_TYPE, sv))
# define newSVGnomeVFSDeviceType(val)	(gperl_convert_back_enum (GNOME_VFS_TYPE_VFS_DEVICE_TYPE, val))
#endif /* GNOME_VFS_TYPE_VFS_DEVICE_TYPE */

#ifdef GNOME_VFS_TYPE_VFS_VOLUME_TYPE
  /* GEnum GnomeVFSVolumeType */
# define SvGnomeVFSVolumeType(sv)	((GnomeVFSVolumeType)gperl_convert_enum (GNOME_VFS_TYPE_VFS_VOLUME_TYPE, sv))
# define newSVGnomeVFSVolumeType(val)	(gperl_convert_back_enum (GNOME_VFS_TYPE_VFS_VOLUME_TYPE, val))
#endif /* GNOME_VFS_TYPE_VFS_VOLUME_TYPE */

#ifdef GNOME_VFS_TYPE_VFS_DNS_SD_SERVICE_STATUS
  /* GEnum GnomeVFSDNSSDServiceStatus */
# define SvGnomeVFSDNSSDServiceStatus(sv)	((GnomeVFSDNSSDServiceStatus)gperl_convert_enum (GNOME_VFS_TYPE_VFS_DNS_SD_SERVICE_STATUS, sv))
# define newSVGnomeVFSDNSSDServiceStatus(val)	(gperl_convert_back_enum (GNOME_VFS_TYPE_VFS_DNS_SD_SERVICE_STATUS, val))
#endif /* GNOME_VFS_TYPE_VFS_DNS_SD_SERVICE_STATUS */

#ifdef GNOME_VFS_TYPE_VFS_MIME_EQUIVALENCE
  /* GEnum GnomeVFSMimeEquivalence */
# define SvGnomeVFSMimeEquivalence(sv)	((GnomeVFSMimeEquivalence)gperl_convert_enum (GNOME_VFS_TYPE_VFS_MIME_EQUIVALENCE, sv))
# define newSVGnomeVFSMimeEquivalence(val)	(gperl_convert_back_enum (GNOME_VFS_TYPE_VFS_MIME_EQUIVALENCE, val))
#endif /* GNOME_VFS_TYPE_VFS_MIME_EQUIVALENCE */

#ifdef GNOME_VFS_TYPE_ADDRESS
  /* GBoxed GnomeVFSAddress */
  typedef GnomeVFSAddress GnomeVFSAddress_ornull;
# define SvGnomeVFSAddress(sv)	((GnomeVFSAddress *) gperl_get_boxed_check ((sv), GNOME_VFS_TYPE_ADDRESS))
# define SvGnomeVFSAddress_ornull(sv)	(gperl_sv_is_defined (sv) ? SvGnomeVFSAddress (sv) : NULL)
  typedef GnomeVFSAddress GnomeVFSAddress_own;
  typedef GnomeVFSAddress GnomeVFSAddress_copy;
  typedef GnomeVFSAddress GnomeVFSAddress_own_ornull;
# define newSVGnomeVFSAddress(val)	(gperl_new_boxed ((gpointer) (val), GNOME_VFS_TYPE_ADDRESS, FALSE))
# define newSVGnomeVFSAddress_ornull(val)	((val) ? newSVGnomeVFSAddress(val) : &PL_sv_undef)
# define newSVGnomeVFSAddress_own(val)	(gperl_new_boxed ((gpointer) (val), GNOME_VFS_TYPE_ADDRESS, TRUE))
# define newSVGnomeVFSAddress_copy(val)	(gperl_new_boxed_copy ((gpointer) (val), GNOME_VFS_TYPE_ADDRESS))
# define newSVGnomeVFSAddress_own_ornull(val)	((val) ? newSVGnomeVFSAddress_own(val) : &PL_sv_undef)
#endif /* GNOME_VFS_TYPE_ADDRESS */
